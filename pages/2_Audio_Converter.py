import streamlit as st
import os
import zipfile
import io
from pydub import AudioSegment
from pydub.effects import normalize

st.title("üîä –ê—É–¥–∏–æ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä")

st.markdown("–ó–∞–≥—Ä—É–∑–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π WAV —Ñ–æ—Ä–º–∞—Ç (16 –±–∏—Ç, 44.1 –∫–ì—Ü, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ 0 dBFS).")

# Allow uploading multiple audio files
uploaded_files = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã (wav, mp3, flac, –∏ —Ç.–¥.)",
    type=["wav", "mp3", "flac", "ogg", "m4a", "aac"], # Add more formats as needed
    accept_multiple_files=True,
    key="uploader_converter" # Unique key for this uploader
)

# Add a button to trigger processing, disabled if no files are uploaded
start_processing = st.button("–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", disabled=(not uploaded_files), key="start_converter")

if start_processing and uploaded_files:
    converted_files = {} # Store {'original_filename.wav': data_bytes}
    errors = {} # Store {'original_filename': error_message}
    
    total_files = len(uploaded_files)
    progress_bar = st.progress(0, text="–û–±—Ä–∞–±–æ—Ç–∫–∞...")
    
    st.write(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {total_files} —Ñ–∞–π–ª–∞(–æ–≤)...")

    for i, uploaded_file in enumerate(uploaded_files):
        original_filename = os.path.splitext(uploaded_file.name)[0]
        target_filename = f"{original_filename}.wav" # Standardized output name
        
        try:
            # st.write(f"  - Processing: {uploaded_file.name}") # Optional: Keep detailed logs or remove
            audio_bytes = uploaded_file.getvalue()
            audio_io = io.BytesIO(audio_bytes)
            
            # Load audio
            audio = AudioSegment.from_file(audio_io)
            
            # Process: Set format and normalize
            converted_audio = audio.set_frame_rate(44100).set_sample_width(2)
            converted_audio = normalize(converted_audio, headroom=0.0)
            
            # Export to buffer
            output_buffer = io.BytesIO()
            converted_audio.export(output_buffer, format="wav")
            converted_files[target_filename] = output_buffer.getvalue()
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {uploaded_file.name}: {e}"
            st.error(f"  - {error_msg}")
            errors[uploaded_file.name] = str(e)
        
        # Update progress
        progress_bar.progress((i + 1) / total_files, text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞... ({i+1}/{total_files})")

    progress_bar.empty()
    st.success("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    if errors:
        st.warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å:")
        # Display errors more cleanly
        for name, err in errors.items():
            st.text(f"- {name}: {err}")
        
    if converted_files:
        # Create zip file
        zip_buffer = io.BytesIO()
        with zipfile.ZipFile(zip_buffer, "w") as zip_file:
            for filename, data in converted_files.items():
                zip_file.writestr(filename, data)
        
        st.download_button(
            label=f"–°–∫–∞—á–∞—Ç—å –≤—Å–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(converted_files)}) –≤ .zip",
            data=zip_buffer.getvalue(),
            file_name="–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ_—Ñ–∞–π–ª—ã.zip",
            mime="application/zip",
            use_container_width=True,
            type="primary"
        )

        # Optional: Display previews
        with st.expander("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"):
            for filename, data in converted_files.items():
                st.subheader(filename)
                st.audio(data, format="audio/wav")
                st.download_button(
                    label=f"–°–∫–∞—á–∞—Ç—å {filename}",
                    data=data,
                    file_name=filename,
                    mime="audio/wav",
                    key=f"download_{filename}_converter"
                )
                st.divider()
    elif not errors: # Only show if no files were converted AND there were no errors (e.g., upload then remove)
        st.info("–§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.") 